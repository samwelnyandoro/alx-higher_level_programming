The ``1-my_list`` module
============================
This module contains a custom subclass of int , and only one method: print_sorted.

Using ``print_sorted``
---------------------

First import
~~~~~~~~~~~
First import ``MyList`` from the ``1-my_list`` module. Since the file name contains a numeral, you can't use the simple ``from 1-my_list import MyList``. You can instead use the following syntax:

    >>> MyList = __import__('1-my_list').MyList

Normal use
~~~~~~~~~
First we construct a simple list of integers:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Then print_sorted can be used to print a sorted version of that list:

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

The method will not mutate the original list:

    >>> print(my_list)
    [1, 4, 2, 3, 5]

Unintended use
~~~~~~~~~~~~~
No exceptions arise for these use cases, although there is no practical reason to sort a list of less than 2 members, and per the project instructions only ints are expected as list members:

    - 0 members:

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

    - 1 member:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    [1]

    - floats in list:

    >>> my_list = MyList()
    >>> my_list.append(.1)
    >>> my_list.append(4.2)
    >>> my_list.append(2.6)
    >>> my_list.append(7.3)
    >>> my_list.append(5.0)
    >>> print(my_list)
    [0.1, 4.2, 2.6, 7.3, 5.0]

    >>> my_list.print_sorted()
    [0.1, 2.6, 4.2, 5.0, 7.3]

    - mixed floats and ints:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4.2)
    >>> my_list.append(2.6)
    >>> my_list.append(7.3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4.2, 2.6, 7.3, 5]

    >>> my_list.print_sorted()
    [1, 2.6, 4.2, 5, 7.3]

    - float positive infinity

    >>> my_list = MyList()
    >>> pos_inf = float('inf')
    >>> my_list.append(pos_inf)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    [inf, 4, 2, 7, 5]

    >>> my_list.print_sorted()
    [2, 4, 5, 7, inf]

    - float negative infinity

    >>> my_list = MyList()
    >>> neg_inf = float('-inf')
    >>> my_list.append(neg_inf)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    [-inf, 4, 2, 7, 5]

    >>> my_list.print_sorted()
    [-inf, 2, 4, 5, 7]

    - float "not a number"

    >>> my_list = MyList()
    >>> not_a_num = float('nan')
    >>> my_list.append(not_a_num)
    >>> my_list.append(4)
    >>> my_list.append(neg_inf)
    >>> my_list.append(-7)
    >>> my_list.append(pos_inf)
    >>> print(my_list)
    [nan, 4, -inf, -7, inf]

    >>> my_list.print_sorted()
    [nan, -inf, -7, 4, inf]

Exceptions
~~~~~~~~~
No custom exceptions built in. Standard TypeErrors shown for argument count and list member types.

    - more than 0 args:

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
        ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

    >>> my_list.print_sorted([1, 4, 2, 3, 5])
    Traceback (most recent call last):
        ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

    - None in list:

    >>> my_list = MyList()
    >>> my_list.append(None)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    [None, 4, 2, 7, 5]

    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: unorderable types: int() < NoneType()

    - string in list:

    >>> my_list = MyList()
    >>> my_list.append('1')
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    ['1', 4, 2, 7, 5]

    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: unorderable types: int() < str()

    - list in list:

    >>> my_list = MyList()
    >>> my_list.append([1, 3])
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    [[1, 3], 4, 2, 7, 5]

    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: unorderable types: int() < list()

    - tuple in list:

    >>> my_list = MyList()
    >>> my_list.append((1, 3))
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    [(1, 3), 4, 2, 7, 5]

    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: unorderable types: int() < tuple()
